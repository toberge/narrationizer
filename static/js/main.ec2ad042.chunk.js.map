{"version":3,"sources":["game/words.ts","game/actions.ts","game/parser.ts","components/Log.tsx","components/InputBox.tsx","game/performer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["createHashMap","array","map","Map","forEach","word","set","hashMaps","types","lookaheadIndexOf","i","length","get","ParsedPhrase","this","constructor","name","Action","SingularAction","DirectionalAction","argument","Direction","ObjectAction","SomeObject","createParseAction","lookahead","lookaheadTable","Log","bottomRef","React","createRef","current","scrollIntoView","behavior","prevProps","prevState","snapshot","id","props","text","key","ref","Component","Form","onChange","onSubmit","type","e","target","value","onClick","FormContainer","state","command","feedback","parsedCommand","debugStack","push","input","trim","split","stack","position","error","done","console","scanPos","phrase","slice","reduce","acc","val","toLowerCase","log","parse","act","perform","action","setState","getThatMessage","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec2ad042.chunk.js","sourcesContent":["const singularActions = ['sleep', 'wait', 'die'];\nconst directions = ['up', 'down', 'left', 'right', 'north', 'south', 'east', 'west'];\nconst directionalActions = ['go', 'walk', 'run'];\nconst objects = ['door', 'key', 'exit', 'two furry dice'];\nconst objectActions = ['open', 'pick up', 'take', 'inspect', 'look at', 'throw', 'stroke'];\n\nconst createHashMap = (array: string[]): Map<string, boolean> => {\n  const map: Map<string, boolean> = new Map();\n  array.forEach(word => map.set(word, true));\n  return map;\n};\n\n// used to get lookahead ID.\nexport const hashMaps: Map<string, boolean>[] = [\n  createHashMap(singularActions),\n  createHashMap(directionalActions),\n  createHashMap(directions),\n  createHashMap(objectActions),\n  createHashMap(objects)\n];\n\nexport const types: string[] = [\n  'singular action',\n  'directional action',\n  'direction',\n  'object action',\n  'object'\n];\n\nexport const lookaheadIndexOf = (word: string): number => {\n  for (let i = 0; i < hashMaps.length; i++) {\n    if (hashMaps[i].get(word)) {\n      return i;\n    }\n  }\n  return -1; // not found\n};\n","export class ParsedPhrase {\n  // parent: ParsedPhrase | null = null;\n  // children: ParsedPhrase[] = [];\n  public readonly word: string;\n\n  constructor(word: string) {\n    this.word = word;\n  }\n\n  public toString(): string {\n    return this.constructor.name + ' ' + this.word;\n  }\n}\n\nexport abstract class Action extends ParsedPhrase {\n  abstract perform(argument: ParsedPhrase): string;\n}\n\nexport class SingularAction extends ParsedPhrase {\n  perform(): string {\n    return `You will now ${this.word}`;\n  }\n}\nexport class DirectionalAction extends Action {\n  perform(argument: Direction): string {\n    return `You wanna ${this.word} to the ${argument.word} & it is fine.`;\n  }\n}\nexport class Direction extends ParsedPhrase {}\nexport class ObjectAction extends Action {\n  perform(argument: SomeObject): string {\n    return `You ${this.word} the ${argument.word} (somehow)`;\n  }\n}\nexport class SomeObject extends ParsedPhrase {}\n\nexport const createParseAction = (word: string, lookahead: number): ParsedPhrase => {\n  // should avoid the switch sometime\n  switch (lookahead) {\n    case 0:\n      return new SingularAction(word);\n    case 1:\n      return new DirectionalAction(word);\n    case 2:\n      return new Direction(word);\n    case 3:\n      return new ObjectAction(word);\n    case 4:\n      return new SomeObject(word);\n    default:\n      return new SingularAction('roflmao something went wrong');\n  }\n};\n","import { hashMaps, lookaheadIndexOf, types } from './words';\nimport { createParseAction, ParsedPhrase } from './actions';\n\n/**\n * Kind of an LR parser, used https://en.wikipedia.org/wiki/LR_parser as reference\n * - but this grammar is so simple I do not need the left hand side goto part of\n */\n\n// used to determine next state while parsing\nexport const lookaheadTable: number[][] = [\n  [\n    // state 0\n    1, // singular action\n    2, // dirverb\n    -1, // direction\n    3, // object action\n    -1, // object\n    -1 // eof\n  ],\n  [\n    // state 1\n    -1, // singular action\n    -1, // dirverb\n    -1, // direction\n    -1, // object action\n    -1, // object\n    -2 // eof -> done\n  ],\n  [\n    // state 2\n    -1, // singular action\n    -1, // dirverb\n    1, // direction\n    -1, // object action\n    -1, // object\n    -1 // eof\n  ],\n  [\n    // state 3\n    -1, // singular action\n    -1, // dirverb\n    -1, // direction\n    -1, // object action\n    1, // object\n    -1 // eof\n  ]\n];\n\nexport const parse = (command: string): null | ParsedPhrase[] => {\n  const debugStack : (string|number)[] = [];\n  debugStack.push(0);\n\n  // shearing away whitespace\n  const input: string[] = command.trim().split(' ');\n  const stack: ParsedPhrase[] = [];\n  let position = 0;\n\n  let error: boolean = false,\n    done: boolean = false;\n  //let state : number = 0;\n\n  let state: number = 0;\n\n  // TODO get rid of those two booleans & have pure returns!\n  while (!error && !done) {\n\n    if (state === -1) {\n      console.error('reached error state; command did not match syntax');\n      error = true;\n      break;\n    }\n\n    if (position === input.length) {\n      if (lookaheadTable[state][lookaheadTable[0].length - 1] === -2) {\n        // we reached EOF in valid state\n        done = true;\n      } else {\n        error = true;\n      }\n      break;\n    }\n\n    let lookahead = -1;\n    let scanPos = position + 1;\n    let phrase = '';\n    // do the lexical parsing\n    while (lookahead < 0 && scanPos <= input.length) {\n      phrase = input.slice(position, scanPos).reduce((acc, val) => `${acc} ${val}`);\n      // ignoring case differences when looking up type\n      lookahead = lookaheadIndexOf(phrase.toLowerCase());\n      scanPos++;\n    }\n    position = scanPos - 1;\n    console.log(phrase);\n\n    // did we find anything? if not, it's invalid.\n    if (scanPos === input.length + 1 && lookahead < 0) {\n      console.error('lexical lookup failed, invalid command!');\n      error = true;\n      break;\n    }\n\n    // push slice and next state to stack, doing the \"actual\" parsing work here\n    debugStack.push(phrase);\n    debugStack.push(types[lookahead]);\n    stack.push(createParseAction(phrase, lookahead));\n    console.log('was in state', state);\n    state = lookaheadTable[state][lookahead];\n    console.log('state:', state, 'lookahead:', lookahead);\n    debugStack.push(state);\n  }\n\n  if (error) {\n    console.log('damn invalid stuff...');\n    return null;\n  } else {\n    console.log('is valid');\n    console.log(debugStack);\n    return stack;\n  }\n};\n","import React, { RefObject } from 'react';\nimport './Log.css';\n\nexport default class Log extends React.Component<{ text: string[] }, {}> {\n  private bottomRef = React.createRef<HTMLDivElement>();\n\n  componentDidMount(): void {\n    if (this.bottomRef.current) this.bottomRef.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  componentDidUpdate(\n    prevProps: Readonly<{ text: string[] }>,\n    prevState: Readonly<{}>,\n    snapshot?: any\n  ): void {\n    if (this.bottomRef.current) this.bottomRef.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  render() {\n    return (\n      <div id=\"log\">\n        {this.props.text.map((text, i) => (\n          <p key={i}>{text}</p>\n        ))}\n        <div ref={this.bottomRef} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { parse } from '../game/parser';\nimport Log from './Log';\nimport { perform } from '../game/performer';\n\nconst Form = ({\n  onChange,\n  onSubmit\n}: {\n  onChange: (command: string) => void;\n  onSubmit: () => void;\n}) => (\n  <fieldset>\n    <legend>hello pls tell me wat to do</legend>\n    Command: <input type=\"text\" onChange={e => onChange(e.target.value)} />\n    <input type=\"button\" onClick={onSubmit} value=\"clickety click\" />\n  </fieldset>\n);\n\nexport class FormContainer extends React.Component<{}, { command: string; feedback: string[] }> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      command: '',\n      feedback: [\n        'this is the first line of the log',\n        'try something like \"go left\", \"pick up key\" or \"open door\"'\n      ]\n    };\n  }\n\n  getThatMessage(): string {\n    const parsedCommand = parse(this.state.command);\n    if (parsedCommand) return perform(parsedCommand);\n    else return 'invalid command';\n    // return [...this.state.feedback, thing ? thing.toString() : 'nah'];\n    // return this.state.feedback.push(thing ? thing.toString() : 'nah');\n  }\n\n  render() {\n    return (\n      <>\n        <Log text={this.state.feedback} />\n        <Form\n          onChange={command => this.setState({ command: command })}\n          onSubmit={() =>\n            this.setState({ feedback: [...this.state.feedback, this.getThatMessage()] })\n          }\n        />\n      </>\n    );\n  }\n}\n","import {\n  Direction,\n  DirectionalAction,\n  ObjectAction,\n  ParsedPhrase,\n  SingularAction,\n  SomeObject\n} from './actions';\n\nexport const perform = (stack: ParsedPhrase[]): string => {\n  if (stack.length === 1) {\n    const act = stack[0];\n\n    // does require the action to be possible *right now*\n    // (don't sleep with monster in room)\n    if (act instanceof SingularAction) return act.perform();\n    else return 'wtf';\n  } else if (stack.length === 2) {\n    const action = stack[0],\n      argument = stack[1];\n\n    if (action instanceof ObjectAction && argument instanceof SomeObject) {\n      // requires checking if there is such an object in the current room or inventory\n      return action.perform(argument);\n    } else if (action instanceof DirectionalAction && argument instanceof Direction) {\n      // requires there being a passage in that direction\n      return action.perform(argument);\n    } else {\n      return 'no viable 2-phrase action';\n    }\n  } else {\n    return 'not an accepted command stack size';\n  }\n};\n","import React from 'react';\nimport './App.css';\nimport { FormContainer } from './components/InputBox';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>hi there</h1>\n      </header>\n      <main>\n        <FormContainer />\n      </main>\n      <footer>\n        <p>\n          <small>\n            a friendly reminder that this is <strong>not in any way</strong> finished\n          </small>\n          <br />\n          <small>please be kind to my creation</small>\n        </p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}